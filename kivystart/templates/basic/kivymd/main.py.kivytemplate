"""
Kivy specific application generated by KivyStart v[kivystart_version]

Welcome to the Kivy app!
Project name: [[ projectname ]]
App name: [[ appname ]]
Date: [[ creation_date ]]

Thanks to Brian Musakwa <digreatbrian@gmail.com> for this awesome project!
"""
import kivy
import pathlib

[[ if kivy_version ]]
kivy.require("[[ kivy_version ]]")
[[ endif ]]

from kivy.lang import Builder
from kivymd.app import MDApp
from kivymd.uix.boxlayout import MDBoxLayout

from components.screen_manager import MainScreenManager
from components.screens.main_screen import MainScreen
from components.main_container import MainContainer
from components.toolbar import MainToolbar


[[ if owner_name ]]
__author__ = "[[ owner_name ]]"
[[ else ]]
__author__ = "<Your Name>" # Your name here
[[ endif ]]
[[ if owner_email ]]
__email__ = "[[ owner_email ]]"
[[ else ]]
__email__ = "<Your Email>" # Your email here
[[ endif ]]


class RootContainer(MDBoxLayout):
    """
    The top-level container that holds all other components in the app. 
     It is set to a vertical orientation, meaning its child widgets 
     will be stacked vertically (one above the other).
    """
    orientation = "vertical"


class [[ appname ]](MDApp):
    """
    A simple Kivy app that demonstrates the layout structure using ScreenManager, 
    MainScreen, Toolbar, and MainContainer.

    Layout Breakdown:
    - ScreenManager:
        This is the top-level container that manages different screens in the app.
        It handles switching between various views, allowing you to create a 
        multi-screen interface.

    - MainScreen:
        The main screen of the app, containing the essential content that the 
        user interacts with. It includes the MainContainer and Toolbar, making it 
        the central screen for your app's functionality.

    - Main Container:
        A container that holds the core content of the app. This could include widgets 
        like labels, buttons, and other UI elements. It is the first descendant of 
        MainScreen and is the area where most of the interactive elements reside.

    - MainToolbar:
        A navigation bar or action bar placed typically at the top of the screen. 
        It contains buttons for user actions or navigation. The toolbar is a sibling 
        to the MainContainer and is located above it in the layout hierarchy.

    Layout Structure:
    - The ScreenManager acts as the root for managing the display of different screens. 
    - The MainScreen is added as a child to the ScreenManager and holds both the MainContainer 
      and MainToolbar.
    - The MainContainer contains widgets like labels, buttons, and other interactive elements 
      and is displayed in the central area of the screen.
    - The MainToolbar sits above the MainContainer and holds navigation or action buttons.

    Example Usage:
    - MainContainer holds the core UI components like labels and buttons.
    - MainToolbar contains action buttons like "Home", "Settings", etc.
    - ScreenManager allows for navigating between multiple screens (e.g., MainScreen, SettingsScreen).

    This structure enables a clear separation of concerns, where the ScreenManager handles 
    the navigation and each screen can manage its own layout and widgets independently.

    Attributes:
        None

    Methods:
        build() -> ScreenManager:
            Returns the ScreenManager containing the MainScreen, which holds the MainContainer 
            and MainToolbar as its children.
    """
    def build(self):
        """
        Main entry method for building [[ appname ]].
        """
        app_dir = pathlib.Path(__file__).resolve().parent
        Builder.load_file(str(app_dir / "kv_files" / "root_container.kv"))
        return RootContainer()


if __name__ == "__main__":
    mainapp = [[ appname ]]()
    mainapp.run()
